\documentclass{article}
\usepackage{amsmath}
\usepackage{tikz}
\usepackage{listings}
\usepackage{color}
\usepackage{pgfplots}

\definecolor{codebg}{rgb}{0.95,0.95,0.95}
\lstset{
    backgroundcolor=\color{codebg},
    basicstyle=\ttfamily,
    frame=single,
    breaklines=true,
    language=Python,
    keywordstyle=\color{blue},
    commentstyle=\color{gray},
    stringstyle=\color{green},
}

\title{Linear Regression}

\begin{document}

\maketitle

\section{Introduction}

Linear regression is a statistical method that models the relationship between a dependent variable \( y \) and one or more independent variables \( X \). The simplest form is simple linear regression, which uses only one independent variable. The goal is to find a linear relationship that best predicts the dependent variable.

\section{Mathematical Formulation}

In simple linear regression, the relationship between the dependent variable \( y \) and the independent variable \( x \) is modeled by the equation:
\[
y = \beta_0 + \beta_1 x + \epsilon
\]
where:
\begin{itemize}
    \item \( y \) is the dependent variable,
    \item \( x \) is the independent variable,
    \item \( \beta_0 \) is the y-intercept,
    \item \( \beta_1 \) is the slope of the line,
    \item \( \epsilon \) is the error term.
\end{itemize}

\section{Usage}

Linear regression is used in various fields for prediction and forecasting. For example, it can be used to predict sales based on advertising spending, to determine the relationship between age and income, or to forecast stock prices based on historical data.

\section{Python Code for Linear Regression}

Below is a Python code example that demonstrates how to perform linear regression using the \texttt{scikit-learn} library:

\begin{lstlisting}
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Sample data
X = np.array([[1], [2], [3], [4], [5]])
y = np.array([1, 3, 2, 5, 4])

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Predict
y_pred = model.predict(X)

# Plot the data and the model's prediction
plt.scatter(X, y, color='blue', label='Data points')
plt.plot(X, y_pred, color='red', label='Linear regression line')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression Example')
plt.legend()
plt.show()
\end{lstlisting}

\section{Graphical Representation}

The graph below shows a simple linear regression model. The blue dots represent the actual data points, and the red line represents the linear regression line that best fits the data.

\begin{figure}[h]
    \centering
    \begin{tikzpicture}
        \begin{axis}[
            xlabel={$x$},
            ylabel={$y$},
            title={Linear Regression Example},
            legend pos=south east,
            grid=major,
            width=10cm,
            height=6cm
        ]
        \addplot[
            only marks,
            color=blue,
            mark=*,
            mark size=2pt
        ] coordinates {
            (1,1) (2,3) (3,2) (4,5) (5,4)
        };
        \addlegendentry{Data points}

        \addplot[
            color=red,
            thick
        ] coordinates {
            (1,1.4) (2,2.2) (3,3.0) (4,3.8) (5,4.6)
        };
        \addlegendentry{Linear regression line}
        \end{axis}
    \end{tikzpicture}
    \caption{Linear Regression Example}
    \label{fig:linear_regression}
\end{figure}

\end{document}
